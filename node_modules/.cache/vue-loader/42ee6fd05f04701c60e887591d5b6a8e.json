{"remainingRequest":"/home/runner/work/U2_Investigacion_Operaciones/U2_Investigacion_Operaciones/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Investigacion_Operaciones/U2_Investigacion_Operaciones/src/views/curso/Tema2.vue?vue&type=template&id=00a40dac&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Investigacion_Operaciones/U2_Investigacion_Operaciones/src/views/curso/Tema2.vue","mtime":1745167019798},{"path":"/home/runner/work/U2_Investigacion_Operaciones/U2_Investigacion_Operaciones/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Investigacion_Operaciones/U2_Investigacion_Operaciones/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Investigacion_Operaciones/U2_Investigacion_Operaciones/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Investigacion_Operaciones/U2_Investigacion_Operaciones/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Investigacion_Operaciones/U2_Investigacion_Operaciones/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMi4gUGxhbnRlYW1pZW50byBkZSBwcm9ibGVtYXMgZGUgUHJvZ3JhbWFjacOzbiBMaW5lYWwnIikKICAuY29udGFpbmVyLnRhcmpldGEudGFyamV0YS0tYmxhbmNhLnAtNC5wLW1kLTUub3ZlcmZsb3ctaGlkZGVuCgogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtbGctNAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMS5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgIC5jb2wtbGctOAogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTQgRW4gZWwgw6FtYml0byBkZSBsYSBnZXN0acOzbiBlbXByZXNhcmlhbCwgbGEgZWZpY2llbmNpYSBlbiBsYSBhc2lnbmFjacOzbiBkZSByZWN1cnNvcyBlcyB1biBmYWN0b3IgZGV0ZXJtaW5hbnRlIHBhcmEgZWwgw6l4aXRvIG9yZ2FuaXphY2lvbmFsLiBVbmEgZGUgbGFzIGhlcnJhbWllbnRhcyBtw6FzIHV0aWxpemFkYXMgcGFyYSBlc3RlIHByb3DDs3NpdG8gZXMgbGEgUHJvZ3JhbWFjacOzbiBMaW5lYWwgKFBMKSwgcXVlIHBlcm1pdGUgbW9kZWxhciBwcm9ibGVtYXMgZW4gbG9zIHF1ZSBzZSBidXNjYSBtYXhpbWl6YXIgbyBtaW5pbWl6YXIgdW5hIGZ1bmNpw7NuIG9iamV0aXZvLCBiYWpvIHVuIGNvbmp1bnRvIGRlIHJlc3RyaWNjaW9uZXMgZXNwZWPDrWZpY2FzIChQdWVudGUgUmlvZnLDrW8gJiBHYXZpbMOhbmV6IMOBbHZhcmV6LCAyMDE4KS4KICAgIAogICAgICAgIC5iZy1jb2xvci0xLnAtNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNAogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMi5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgICAgcC5tYi0wIFN1IGFwbGljYWNpw7NuIGFiYXJjYSBzZWN0b3JlcyBjb21vIGxhIHByb2R1Y2Npw7NuLCBsYSBsb2fDrXN0aWNhLCBsYSBnZXN0acOzbiBkZSBpbnZlbnRhcmlvcyB5IGxhIHBsYW5pZmljYWNpw7NuIGZpbmFuY2llcmEsIHByb3BvcmNpb25hbmRvIHNvbHVjaW9uZXMgYmFzYWRhcyBlbiBtb2RlbG9zIG1hdGVtw6F0aWNvcyBxdWUgZmFjaWxpdGFuIGxhIHRvbWEgZGUgZGVjaXNpb25lcyBlc3RyYXTDqWdpY2FzLgogICAgCiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgRWwgcHJvY2VzbyBkZSBwbGFudGVhbWllbnRvIGRlIHVuIHByb2JsZW1hIGRlIFBMIGVzIGZ1bmRhbWVudGFsLCBwb3JxdWUgZGVmaW5lIGxhIGVzdHJ1Y3R1cmEgZGVsIG1vZGVsbyB5IHBlcm1pdGUgcmVwcmVzZW50YXIgbWF0ZW3DoXRpY2FtZW50ZSBzaXR1YWNpb25lcyBkZWwgbXVuZG8gcmVhbC4gVW5hIGNvcnJlY3RhIGZvcm11bGFjacOzbiBkZWwgcHJvYmxlbWEgZ2FyYW50aXphIHF1ZSBsYXMgc29sdWNpb25lcyBvYnRlbmlkYXMsIHNlYW4gdmlhYmxlcyB5IMO6dGlsZXMgcGFyYSBsYSBvcHRpbWl6YWNpw7NuIGRlIGxvcyByZWN1cnNvcyBkaXNwb25pYmxlcyAoU3XDscOpLCBGb25vbGxvc2EsIEZlcm7DoW5kZXogJiBTYWxsw6FuLCAyMDE2KS4KICAgIAogICAgaDIoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTUgRWxlbWVudG9zIGNsYXZlcyBlbiBlbCBwbGFudGVhbWllbnRvIGRlIHVuIHByb2JsZW1hIGRlIFByb2dyYW1hY2nDs24gTGluZWFsCgogICAgcCBFbCDDqXhpdG8gZW4gbGEgYXBsaWNhY2nDs24gZGUgbGEgUHJvZ3JhbWFjacOzbiBMaW5lYWwgKFBMKSBkZXBlbmRlLCBlbiBncmFuIG1lZGlkYSwgZGUgbGEgY29ycmVjdGEgZm9ybXVsYWNpw7NuIGRlbCBwcm9ibGVtYS4gVW4gbW9kZWxvIGJpZW4gZXN0cnVjdHVyYWRvIGRlYmUgcmVwcmVzZW50YXIgY29uIHByZWNpc2nDs24gbGEgcmVhbGlkYWQgZGUgbGEgb3JnYW5pemFjacOzbiB5IHBlcm1pdGlyIGxhIG9wdGltaXphY2nDs24gZWZpY2llbnRlIGRlIGxvcyByZWN1cnNvcyBkaXNwb25pYmxlcy4gUGFyYSBlbGxvLCBlcyBmdW5kYW1lbnRhbCBjb25zaWRlcmFyIGxvcyBzaWd1aWVudGVzIGVsZW1lbnRvcyBjbGF2ZXMgZW4gc3UgcGxhbnRlYW1pZW50bzoKCiAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctOC5vcmRlci0yLm9yZGVyLWxnLTEgICAgICAKICAgICAgICBMaW5lYVRpZW1wb0QuY29sb3ItcHJpbWFyaW8ubGFyZ2UoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKQogICAgICAgICAgZGl2KG51bWVybz0iMSIgdGl0dWxvPSJPYmpldGl2byBjbGFybyB5IGN1YW50aWZpY2FibGUiKSAKICAgICAgICAgICAgcC5tYi00IFRvZG8gcHJvYmxlbWEgZGUgUEwgZGViZSBlc3RhciBvcmllbnRhZG8gYSBsYSAjW3N0cm9uZyBtYXhpbWl6YWNpw7NuIG8gbWluaW1pemFjacOzbl0gZGUgdW5hIGZ1bmNpw7NuIG9iamV0aXZvIGNsYXJhbWVudGUgZGVmaW5pZGEsIHF1ZSByZXByZXNlbnRlIHVuYSBtw6l0cmljYSBjbGF2ZSBkZW50cm8gZGUgbGEgb3JnYW5pemFjacOzbi4gUG9yIGVqZW1wbG8sIHVuYSBlbXByZXNhIHB1ZWRlIGJ1c2NhciAjW3N0cm9uZyBtYXhpbWl6YXIgbGFzIGdhbmFuY2lhc10gZGUgc3VzIHByb2R1Y3RvcyBvICNbc3Ryb25nIG1pbmltaXphciBsb3MgY29zdG9zXSBkZSBwcm9kdWNjacOzbiB5IGRpc3RyaWJ1Y2nDs24gKEhpbGxpZXIgJiBMaWViZXJtYW4sIDIwMTApLgoKICAgICAgICAgICAgcCAjW3N0cm9uZyBFamVtcGxvOl0KICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yLmNvbG9yLWRhcmsubWItNAogICAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgICAgfCBNYXhpbWl6YXIgbGEgcmVudGFiaWxpZGFkIGVuIGxhIHByb2R1Y2Npw7NuIGRlIGFydMOtY3Vsb3MuCiAgICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgICB8IE1pbmltaXphciBlbCB0aWVtcG8gZGUgZW50cmVnYSBlbiBsYSBsb2fDrXN0aWNhIGRlIGRpc3RyaWJ1Y2nDs24uCgoKICAgICAgICAgIGRpdihudW1lcm89IjIiIHRpdHVsbz0iSWRlbnRpZmljYWNpw7NuIGRlIHZhcmlhYmxlcyBkZSBkZWNpc2nDs24iKSAKICAgICAgICAgICAgcC5tYi00ICNbc3Ryb25nIExhcyB2YXJpYWJsZXMgZGUgZGVjaXNpw7NuXSByZXByZXNlbnRhbiBsYXMgY2FudGlkYWRlcyBxdWUgc2UgY29udHJvbGFuIGRlbnRybyBkZWwgcHJvYmxlbWEgeSBxdWUgYWZlY3RhbiBkaXJlY3RhbWVudGUgbGEgI1tzdHJvbmcgZnVuY2nDs24gb2JqZXRpdm9dLiBEZWJlbiBkZWZpbmlyc2UgY29uIGNsYXJpZGFkLCBwYXJhIGdhcmFudGl6YXIgdW5hIGZvcm11bGFjacOzbiBwcmVjaXNhIGRlbCBtb2RlbG8gKEtvbmcsIDIwMTMpLgoKICAgICAgICAgICAgcCAjW3N0cm9uZyBFamVtcGxvOl0KICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yLmNvbG9yLWRhcmsubWItNAogICAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgICAgfCBFbiB1bmEgZsOhYnJpY2EsIGxhcyB2YXJpYWJsZXMgZGUgZGVjaXNpw7NuIHB1ZWRlbiBzZXIgbGEgY2FudGlkYWQgZGUgdW5pZGFkZXMgYSBwcm9kdWNpciBkZSBjYWRhIHByb2R1Y3RvLgogICAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgICAgfCBFbiB1bmEgZW1wcmVzYSBkZSB0cmFuc3BvcnRlLCBwdWVkZW4gc2VyIGxvcyB2ZWjDrWN1bG9zIGFzaWduYWRvcyBhIGRpc3RpbnRhcyBydXRhcy4KCgogICAgICAgICAgZGl2KG51bWVybz0iMyIgdGl0dWxvPSJSZXN0cmljY2lvbmVzIGRlbCBwcm9ibGVtYSIpCiAgICAgICAgICAgIHAubWItNCBMYXMgI1tzdHJvbmcgICByZXN0cmljY2lvbmVzXSByZXByZXNlbnRhbiBsb3MgbMOtbWl0ZXMgbyBjb25kaWNpb25lcyBiYWpvIGxhcyBjdWFsZXMgZGViZSBvcGVyYXIgZWwgc2lzdGVtYS4gRXN0YXMgcHVlZGVuIGVzdGFyIHJlbGFjaW9uYWRhcyBjb24gbGEgZGlzcG9uaWJpbGlkYWQgZGUgcmVjdXJzb3MsIGNhcGFjaWRhZGVzIGRlIHByb2R1Y2Npw7NuLCBwcmVzdXB1ZXN0byBvIGRlbWFuZGEgZGUgcHJvZHVjdG9zIChQdWVudGUgUmlvZnLDrW8gJiBHYXZpbMOhbmV6IMOBbHZhcmV6LCAyMDE4KS4KCiAgICAgICAgICAgIHAgI1tzdHJvbmcgRWplbXBsbzpdCiAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5jb2xvci1kYXJrLm1iLTQKICAgICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICAgIHwgVW4gbMOtbWl0ZSBkZSA1MDAgaG9yYXMgZGUgcHJvZHVjY2nDs24gZGlzcG9uaWJsZSBlbiB1bmEgZsOhYnJpY2EuCiAgICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgICB8IFVuIHByZXN1cHVlc3RvIG3DoXhpbW8gZGUgJDUwLDAwMCwgcGFyYSBwdWJsaWNpZGFkIGVuIHVuYSBjYW1wYcOxYSBkZSBtYXJrZXRpbmcuCgoKICAgICAgICAgIGRpdihudW1lcm89IjQiIHRpdHVsbz0iTGluZWFsaWRhZCBkZSBsYXMgcmVsYWNpb25lcyIpIAogICAgICAgICAgICBwIFBhcmEgcXVlIHVuIHByb2JsZW1hIHB1ZWRhIHJlc29sdmVyc2UgbWVkaWFudGUgUHJvZ3JhbWFjacOzbiBMaW5lYWwsIHRvZGFzIGxhcyBlY3VhY2lvbmVzIHkgcmVzdHJpY2Npb25lcyBkZWJlbiBzZXIgZXhwcmVzYWRhcyBlbiBmb3JtYSBsaW5lYWwuIEVzdG8gc2lnbmlmaWNhIHF1ZSBsYXMgdmFyaWFibGVzIGRlYmVuIHJlbGFjaW9uYXJzZSBlbnRyZSBzw60gbWVkaWFudGUgc3VtYXMsIHJlc3RhcyBvIG11bHRpcGxpY2FjaW9uZXMgcG9yIGNvbnN0YW50ZXMsIHNpbiBpbnZvbHVjcmFyIHBvdGVuY2lhcywgbG9nYXJpdG1vcyB1IG90cm9zIHTDqXJtaW5vcyBubyBsaW5lYWxlcyAoU3XDscOpIGV0IGFsLiwgMjAxNikuCgogICAgICAuY29sLWxnLTQub3JkZXItMS5vcmRlci1sZy0yCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8zLnBuZyIsIGFsdD0iIiwgZGF0YS1hb3M9Inpvb20taW4iKS5tYi00Lm1iLWxnLTAKICAgIAoKCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy00CiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi80LnBuZyIsIGFsdD0iIiwgZGF0YS1hb3M9Inpvb20taW4iKS5tYi00Lm1iLWxnLTAKICAgICAgLmNvbC1sZy04CiAgICAgICAgCiAgICAgICAgTGluZWFUaWVtcG9ELmNvbG9yLXByaW1hcmlvLmxhcmdlKGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikKICAgICAgICAgIGRpdihudW1lcm89IjUiIHRpdHVsbz0iRmFjdGliaWxpZGFkIGRlIGxhIHNvbHVjacOzbiIpCiAgICAgICAgICAgIHAubWItNCBFbCBjb25qdW50byBkZSByZXN0cmljY2lvbmVzIGRlYmUgZGVmaW5pciB1bmEgcmVnacOzbiBmYWN0aWJsZSwgZXMgZGVjaXIsIHVuIGNvbmp1bnRvIGRlIHNvbHVjaW9uZXMgcG9zaWJsZXMgcXVlIGN1bXBsYW4gdG9kYXMgbGFzIGNvbmRpY2lvbmVzIGRlbCBwcm9ibGVtYS4gU2kgbGEgcmVnacOzbiBmYWN0aWJsZSBlcyBpbmV4aXN0ZW50ZSAoc2lzdGVtYSBpbmNvbnNpc3RlbnRlKSwgbm8gaGFicsOhIHNvbHVjacOzbiB2w6FsaWRhLiBTaSBsYSByZWdpw7NuIGZhY3RpYmxlIGVzIGluZmluaXRhLCBlbCBwcm9ibGVtYSBwdWVkZSBubyB0ZW5lciB1bmEgc29sdWNpw7NuIMOzcHRpbWEgY2xhcmEgKFB1ZW50ZSBSaW9mcsOtbyAmIEdhdmlsw6FuZXogw4FsdmFyZXosIDIwMTgpLgoKICAgICAgICAgICAgcCAjW3N0cm9uZyBFamVtcGxvOl0KICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yLmNvbG9yLWRhcmsubWItNAogICAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgICAgfCBTaSB1bmEgZW1wcmVzYSBkZWJlIHByb2R1Y2lyIGFsIG1lbm9zIDEwMCB1bmlkYWRlcyBkZSB1biBwcm9kdWN0bywgcGVybyBlbCBtb2RlbG8gc3VnaWVyZSBmYWJyaWNhciA1MCwgbGEgc29sdWNpw7NuIG5vIGVzIGZhY3RpYmxlLgoKCiAgICAgICAgICBkaXYobnVtZXJvPSI2IiB0aXR1bG89IkNvbmRpY2lvbmVzIGRlIG5vIG5lZ2F0aXZpZGFkIikgRW4gbGEgbWF5b3LDrWEgZGUgbG9zIGNhc29zLCBsYXMgdmFyaWFibGVzIGRlIGRlY2lzacOzbiByZXByZXNlbnRhbiBjYW50aWRhZGVzIGbDrXNpY2FzIChwcm9kdWN0b3MsIHJlY3Vyc29zLCB0aWVtcG8sIGV0Yy4pLCBwb3IgbG8gcXVlICNbc3Ryb25nIGRlYmVuIHNlciB2YWxvcmVzIHBvc2l0aXZvcyBvIGNlcm9dLiBFc3RvIHNlIGV4cHJlc2EgbWVkaWFudGUgbGEgcmVzdHJpY2Npw7NuIGRlIG5vIG5lZ2F0aXZpZGFkLgoKICAgICAgICAgIGRpdihudW1lcm89IjciIHRpdHVsbz0iQW7DoWxpc2lzIGRlIHNlbnNpYmlsaWRhZCB5IHJvYnVzdGV6IGRlbCBtb2RlbG8iKQogICAgICAgICAgICBwLm1iLTQgTG9zIHBhcsOhbWV0cm9zIGRlbnRybyBkZSB1biBtb2RlbG8gZGUgUEwgcHVlZGVuIGNhbWJpYXIgY29uIGVsIHRpZW1wbywgeWEgc2VhIGVuIGNvc3RvcyBkZSBwcm9kdWNjacOzbiwgZGlzcG9uaWJpbGlkYWQgZGUgcmVjdXJzb3MgbyBkZW1hbmRhIGRlIGxvcyBjbGllbnRlcy4gUG9yIGVzdGEgcmF6w7NuLCBlcyByZWNvbWVuZGFibGUgcmVhbGl6YXIgdW4gYW7DoWxpc2lzIGRlIHNlbnNpYmlsaWRhZCBwYXJhIGV2YWx1YXIgY8OzbW8gYWZlY3RhIGxhIHZhcmlhY2nDs24gZGUgbG9zIGNvZWZpY2llbnRlcyBhIGxhIHNvbHVjacOzbiDDs3B0aW1hIGRlbCBwcm9ibGVtYSAoU3XDscOpIGV0IGFsLiwgMjAxNikuCgogICAgICAgICAgICBwICNbc3Ryb25nIEVqZW1wbG86XQogICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IuY29sb3ItZGFyay5tYi00CiAgICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgICB8IFNpIGF1bWVudGEgZWwgY29zdG8gZGUgbGEgbWF0ZXJpYSBwcmltYSwgwr9jYW1iaWEgbGEgY2FudGlkYWQgw7NwdGltYSBkZSBwcm9kdWN0b3MgYSBmYWJyaWNhcj8KCiAgICAgICAgCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci01Lm1iLTUKICAgICAgLnB4LTQucHgtbWQtNS5weS00CiAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi81LnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgIHAubWItMC50ZXh0LXdoaXRlICNbYiBSZWZsZXhpw7NuXQogICAgICAgICAgICBwLm1iLTAudGV4dC13aGl0ZSBFbCBwbGFudGVhbWllbnRvIGRlIHVuIHByb2JsZW1hIGRlIFByb2dyYW1hY2nDs24gTGluZWFsLCBlcyB1biBwYXNvIGVzZW5jaWFsIHBhcmEgZ2FyYW50aXphciBxdWUgZWwgbW9kZWxvIHJlZmxlamUgZmllbG1lbnRlIGxhIHJlYWxpZGFkIG9yZ2FuaXphY2lvbmFsIHkgcGVybWl0YSBlbmNvbnRyYXIgc29sdWNpb25lcyDDs3B0aW1hcyB5IGZhY3RpYmxlcy4gVW4gbW9kZWxvIGJpZW4gZm9ybXVsYWRvIHByb3BvcmNpb25hIGhlcnJhbWllbnRhcyBwb2Rlcm9zYXMgcGFyYSBsYSB0b21hIGRlIGRlY2lzaW9uZXMgZXN0cmF0w6lnaWNhcywgYXl1ZGFuZG8gYSBsYXMgZW1wcmVzYXMgYSBvcHRpbWl6YXIgY29zdG9zLCBtZWpvcmFyIGxhIGVmaWNpZW5jaWEgb3BlcmF0aXZhIHkgbWF4aW1pemFyIHN1cyBiZW5lZmljaW9zLiAKICAgIAoKCgogICAgI3RfMl8xLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDIuMV0gSWRlbnRpZmljYWNpw7NuIGRlIHZhcmlhYmxlcywgZnVuY2nDs24gb2JqZXRpdm8geSByZXN0cmljY2lvbmVzCgoKICAgIC5yb3cubWItNQogICAgICAuY29sLWxnLTgKICAgICAgICAuYmctY29sb3ItMy5wLTQubWItNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtc3RhcnQKICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvNi5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgICAgcC5tYi0wIFBhcmEgY29uc3RydWlyIHVuIG1vZGVsbyBkZSAjW3N0cm9uZyBQcm9ncmFtYWNpw7NuIExpbmVhbCAoUEwpXSBlZmVjdGl2bywgZXMgZnVuZGFtZW50YWwgY29tcHJlbmRlciB5IGRlZmluaXIgY29ycmVjdGFtZW50ZSB0cmVzIGVsZW1lbnRvcyBlc2VuY2lhbGVzOiBsYXMgdmFyaWFibGVzIGRlIGRlY2lzacOzbiwgbGEgI1tzdHJvbmcgZnVuY2nDs24gb2JqZXRpdm9dIHkgbGFzICNbc3Ryb25nIHJlc3RyaWNjaW9uZXNdLgogICAgCiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgRXN0b3MgZWxlbWVudG9zIHBlcm1pdGVuIGVzdHJ1Y3R1cmFyIGVsIHByb2JsZW1hIGRlIG1hbmVyYSBxdWUgcHVlZGEgcmVzb2x2ZXJzZSBtYXRlbcOhdGljYW1lbnRlIHkgcHJvcG9yY2lvbmFyIHVuYSBzb2x1Y2nDs24gw7NwdGltYSBhIHVuYSBzaXR1YWNpw7NuIHJlYWwuCgogICAgICAgIGgzKGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi00IElkZW50aWZpY2FjacOzbiBkZSB2YXJpYWJsZXMgZGUgZGVjaXNpw7NuCiAgICAKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBMYXMgdmFyaWFibGVzIGRlIGRlY2lzacOzbiByZXByZXNlbnRhbiBsYXMgY2FudGlkYWRlcyBxdWUgbGEgZW1wcmVzYSBvIGVsIHRvbWFkb3IgZGUgZGVjaXNpb25lcyBwdWVkZSBjb250cm9sYXIgeSBtb2RpZmljYXIgZGVudHJvIGRlbCBwcm9ibGVtYS4gRXN0YXMgdmFyaWFibGVzIGRlYmVuIGVzdGFyIGJpZW4gZGVmaW5pZGFzIHkgY3VhbnRpZmljYWRhcywgcG9ycXVlIGFmZWN0YW4gZGlyZWN0YW1lbnRlIGxhIGZ1bmNpw7NuIG9iamV0aXZvIHkgbGFzIHJlc3RyaWNjaW9uZXMuCgogICAgICAgIHAgRWplbXBsbyBkZSB2YXJpYWJsZXMgZGUgZGVjaXNpw7NuOgogICAgCiAgICAgIC5jb2wtbGctNAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvNy5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAKICAgIAogICAgLmJnLWZ1bGwtd2lkdGguYmctZm9uZG8tc2xpZGVyCiAgICAgIC5wLTQucC1tZC01CiAgICAgICAgU2x5ZGVyQSh0aXBvPSJiIikuYmctd2hpdGUKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLnAtNC5wLW1kLTUKICAgICAgICAgICAgLmNvbC1sZy01CiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi9zbGlkZXItMS5wbmciKQogICAgICAgICAgICAuY29sLWxnLTcKICAgICAgICAgICAgICBoNCBFbiB1bmEgZsOhYnJpY2EgZGUgbXVlYmxlcwogICAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5jb2xvci1kYXJrLm1iLTQKICAgICAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgICAgIHwgeOKCgSA9IE7Dum1lcm8gZGUgc2lsbGFzIGEgZmFicmljYXIuCiAgICAgICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgICAgICB8IHjigoIgPSBOw7ptZXJvIGRlIG1lc2FzIGEgZmFicmljYXIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyL3NsaWRlci0yLnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNwogICAgICAgICAgICAgIGg0IEVuIHVuYSBhZXJvbMOtbmVhCiAgICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yLmNvbG9yLWRhcmsubWItNAogICAgICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICAgICAgfCB44oKBID0gTsO6bWVybyBkZSBhc2llbnRvcyB2ZW5kaWRvcyBlbiBjbGFzZSBlY29uw7NtaWNhLgogICAgICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICAgICAgfCB44oKCID0gTsO6bWVybyBkZSBhc2llbnRvcyB2ZW5kaWRvcyBlbiBjbGFzZSBlamVjdXRpdmEuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyL3NsaWRlci0zLnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNwogICAgICAgICAgICAgIGg0IEVuIGxvZ8Otc3RpY2EKICAgICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IuY29sb3ItZGFyay5tYi00CiAgICAgICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgICAgICB8IHjigoEgPSBDYW50aWRhZCBkZSBwcm9kdWN0b3MgZW52aWFkb3MgZGVzZGUgZWwgYWxtYWPDqW4gMS4KICAgICAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgICAgIHwgeOKCgiA9IENhbnRpZGFkIGRlIHByb2R1Y3RvcyBlbnZpYWRvcyBkZXNkZSBlbCBhbG1hY8OpbiAyLgogICAgICAgICAgICAgIAogIAogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItNS5tYi01CiAgICAgIC5weC00LnB4LW1kLTUucHktNAogICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvOC5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICBwLm1iLTAudGV4dC13aGl0ZSAjW2IgQ29uc2VqbzpdCiAgICAgICAgICAgIHAubWItMC50ZXh0LXdoaXRlICNbc3Ryb25nIENhZGEgdmFyaWFibGUgZGViZSB0ZW5lciB1biBzaWduaWZpY2FkbyBjbGFyb10gZGVudHJvIGRlbCBjb250ZXh0byBkZWwgcHJvYmxlbWEgeSBlc3RhciBleHByZXNhZGEgZW4gdW5pZGFkZXMgZXNwZWPDrWZpY2FzIChjYW50aWRhZCBkZSBwcm9kdWN0b3MsIHRpZW1wbyBlbiBob3Jhcywgdm9sdW1lbiBkZSBwcm9kdWNjacOzbikuIAogICAgCgogICAgaDIoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTUgRnVuY2nDs24gb2JqZXRpdm8KCiAgICBwLm1iLTQgTGEgI1tzdHJvbmcgZnVuY2nDs24gb2JqZXRpdm9dIGV4cHJlc2EgbWF0ZW3DoXRpY2FtZW50ZSBlbCBwcm9ww7NzaXRvIGRlbCBtb2RlbG8sIGVzIGRlY2lyLCBsbyBxdWUgc2UgYnVzY2EgI1tzdHJvbmcgbWF4aW1pemFyXSBvICNbc3Ryb25nIG1pbmltaXphcl0uIEdlbmVyYWxtZW50ZSwgc2UgcmVsYWNpb25hIGNvbjoKCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtc3RyZXRjaC5tYi01CiAgICAgIC5jb2wtbGctNgogICAgICAgIC5iZy1jb2xvci00LnAtNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikuaC0xMDAKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzkuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgIGg1Lm1iLTIgUHJpbWVybwogICAgICAgICAgICAgIHAubWItMCBNYXhpbWl6YWNpw7NuIGRlIGJlbmVmaWNpb3MsIGluZ3Jlc29zIG8gZWZpY2llbmNpYS4KICAgIAogICAgICAuY29sLWxnLTYKICAgICAgICAuYmctY29sb3ItNC5wLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLmgtMTAwCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xMC5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgICAgaDUubWItMiBTZWd1bmRvCiAgICAgICAgICAgICAgcC5tYi0wIE1pbmltaXphY2nDs24gZGUgY29zdG9zLCB0aWVtcG9zIG8gZGVzcGVyZGljaW9zLgogICAgCgogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtbGctOAogICAgICAgIHAubWItNCBFamVtcGxvIGRlIGZvcm11bGFjacOzbiBkZSBmdW5jacOzbiBvYmpldGl2bzoKCiAgICAgICAgLmJnLWNvbG9yLTMucC00LnB4LWxnLTUoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICBwLm1iLTQgU2kgdW5hIGVtcHJlc2EgcXVpZXJlIG1heGltaXphciBzdXMgZ2FuYW5jaWFzIHZlbmRpZW5kbyBkb3MgcHJvZHVjdG9zIEEgeSBCLCBjb24gZ2FuYW5jaWFzIHVuaXRhcmlhcyBkZSAkNTAgeSAkNDAsIHJlc3BlY3RpdmFtZW50ZSwgbGEgZnVuY2nDs24gb2JqZXRpdm8gc2Vyw6E6IFogPSA1MHjigoEgKyA0MHjigoIgCgogICAgICAgICAgcC5tYi00IERvbmRlOgoKICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5jb2xvci1kYXJrLm1iLTQKICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgIHwgWiA9IEdhbmFuY2lhIHRvdGFsCgogICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgfCB44oKBID0gQ2FudGlkYWQgZGVsIHByb2R1Y3RvIEEKCiAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICB8IHjigoIgPSBDYW50aWRhZCBkZWwgcHJvZHVjdG8gQgoKCiAgICAgIC5jb2wtbGctNAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMTEucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKSAgCiAgICAKCgogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItNS5tYi01CiAgICAgIC5weC00LnB4LW1kLTUucHktNAogICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMTIuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgcC5tYi0wLnRleHQtd2hpdGUgI1tiIENvbnNlam86XQogICAgICAgICAgICBwLm1iLTAudGV4dC13aGl0ZSBMYSBmdW5jacOzbiBvYmpldGl2byBzaWVtcHJlIGRlYmUgc2VyIHVuYSBlY3VhY2nDs24gbGluZWFsLCBleHByZXNhZGEgZW4gdMOpcm1pbm9zIGRlIGxhcyB2YXJpYWJsZXMgZGUgZGVjaXNpw7NuIHkgc3VzIGNvZWZpY2llbnRlcy4gCgoKICAgIGgyKGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi01IElkZW50aWZpY2FjacOzbiBkZSByZXN0cmljY2lvbmVzCgogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtbGctNAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMTMucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKQoKICAgICAgLmNvbC1sZy04CiAgICAgICAgcC5tYi00IExhcyByZXN0cmljY2lvbmVzIHJlcHJlc2VudGFuIGxvcyBsw61taXRlcyBvIGNvbmRpY2lvbmVzIGltcHVlc3RhcyBwb3IgZWwgcHJvYmxlbWEuIEVzdGFzIHB1ZWRlbiBlc3RhciByZWxhY2lvbmFkYXMgY29uOgoKICAgICAgICAuYmctY29sb3ItMy5wLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTQKICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5jb2xvci1kYXJrLm1iLTQKICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgIHwgRGlzcG9uaWJpbGlkYWQgZGUgcmVjdXJzb3MgKG1hdGVyaWEgcHJpbWEsIHRpZW1wbyBkZSBwcm9kdWNjacOzbiwgcHJlc3VwdWVzdG8pLgogICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgfCBDYXBhY2lkYWQgZGUgcHJvZHVjY2nDs24gbyB0cmFuc3BvcnRlIChuw7ptZXJvIG3DoXhpbW8gZGUgdW5pZGFkZXMgcXVlIHB1ZWRlbiBwcm9kdWNpcnNlIG8gZW52aWFyc2UpLgogICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgfCBEZW1hbmRhcyBvIHJlcXVlcmltaWVudG9zIG3DrW5pbW9zIChtw61uaW1vcyBwZWRpZG9zIHBvciBsb3MgY2xpZW50ZXMgbyBlc3TDoW5kYXJlcyBkZSBjYWxpZGFkKS4KICAgICAgICAgIAogICAgICAgICAgcCBFamVtcGxvIGRlIGZvcm11bGFjacOzbiBkZSByZXN0cmljY2lvbmVzOgogICAgICAgICAgCiAgICAuYmctZnVsbC13aWR0aC5iZy1mb25kby1zbGlkZXIubWItNQogICAgICAucC00LnAtbWQtNQogICAgICAgIFNseWRlckEodGlwbz0iYiIpLmJnLXdoaXRlCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNS5vcmRlci1sZy0yCiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi9zbGlkZXItMi0xLnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNy5vcmRlci1sZy0xCiAgICAgICAgICAgICAgcCBTaSB1bmEgZW1wcmVzYSBkaXNwb25lIGRlICNbc3Ryb25nIDEwMCBob3JhcyBkZSBwcm9kdWNjacOzbl0geSBmYWJyaWNhciBjYWRhIHByb2R1Y3RvIHJlcXVpZXJlIGNpZXJ0byB0aWVtcG8sIGxhIHJlc3RyaWNjacOzbiBzZSBleHByZXNhIGNvbW86CiAgICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yLmNvbG9yLWRhcmsubWItNAogICAgICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICAgICAgfCAyeOKCgSArIHjigoIg4omkIDEwMCDihpIgVGllbXBvIHRvdGFsIGRpc3BvbmlibGUgcGFyYSBsYSBwcm9kdWNjacOzbi4KICAgICAgICAgICAgICAKICAgICAgICAgICAgICB1bC5saXN0YS11bC5tYi0zCiAgICAgICAgICAgICAgICBsaQogICAgICAgICAgICAgICAgICB8IOKKlSAyeOKCgTogSG9yYXMgcmVxdWVyaWRhcyBwYXJhIGZhYnJpY2FyIGNhZGEgdW5pZGFkIGRlbCBwcm9kdWN0byBBLgoKICAgICAgICAgICAgICAgIGxpCiAgICAgICAgICAgICAgICAgIHwg4oqVIHjigoI6IEhvcmFzIG5lY2VzYXJpYXMgcGFyYSBmYWJyaWNhciBjYWRhIHVuaWRhZCBkZWwgcHJvZHVjdG8gQi4KCiAgICAgICAgICAgICAgICBsaQogICAgICAgICAgICAgICAgICB8IOKKlSAxMDA6IFRpZW1wbyBtw6F4aW1vIGRpc3BvbmlibGUuCgogICAgICAgICAgICAgIAogICAgICAgICAgICAgIAogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUub3JkZXItbGctMgogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvc2xpZGVyLTItMi5wbmciKQogICAgICAgICAgICAuY29sLWxnLTcub3JkZXItbGctMQogICAgICAgICAgICAgIHAgU2kgbGEgZW1wcmVzYSBjdWVudGEgY29uICNbc3Ryb25nIDkwIHVuaWRhZGVzIGRlIG1hdGVyaWEgcHJpbWFdLCBsYSByZXN0cmljY2nDs24gc2Vyw6E6CiAgICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yLmNvbG9yLWRhcmsubWItNAogICAgICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICAgICAgfCB44oKBICsgM3jigoIg4omkIDkwIOKGkiBMw61taXRlIGRlIG1hdGVyaWEgcHJpbWEuCiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgdWwubGlzdGEtdWwubWItMwogICAgICAgICAgICAgICAgbGkKICAgICAgICAgICAgICAgICAgfCDiipUgeOKCgTogVW5pZGFkZXMgZGVsIHByb2R1Y3RvIEEgcGFyYSBmYWJyaWNhci4KICAgICAgICAgICAgICAgIGxpCiAgICAgICAgICAgICAgICAgIHwg4oqVIDN44oKCOiBNYXRlcmlhIHByaW1hIHJlcXVlcmlkYSBwYXJhIGNhZGEgdW5pZGFkIGRlbCBwcm9kdWN0byBCLgogICAgICAgICAgICAgICAgbGkKICAgICAgICAgICAgICAgICAgfCDiipUgOTA6IERpc3BvbmliaWxpZGFkIHRvdGFsIGRlIG1hdGVyaWEgcHJpbWEuCgogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUub3JkZXItbGctMgogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvc2xpZGVyLTItMy5wbmciKQogICAgICAgICAgICAuY29sLWxnLTcub3JkZXItbGctMQogICAgICAgICAgICAgIHAgRmluYWxtZW50ZSwgcGFyYSBhc2VndXJhciBxdWUgbGFzIHNvbHVjaW9uZXMgc2VhbiB2aWFibGVzLCBzZSBpbXBvbmUgbGEgcmVzdHJpY2Npw7NuIGRlICNbc3Ryb25nIG5vIG5lZ2F0aXZpZGFkXToKICAgICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IuY29sb3ItZGFyay5tYi00CiAgICAgICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgICAgICB8IHjigoEsIHjigoIg4omlIDAg4oaSIE5vIHNlIHB1ZWRlbiBmYWJyaWNhciBjYW50aWRhZGVzIG5lZ2F0aXZhcyBkZSBwcm9kdWN0b3MuCgoKICAgIC5yb3cubWItNS5hbGlnbi1pdGVtcy1zdHJldGNoCiAgICAgIC5jb2wtbGctNAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMTQucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKQoKICAgICAgLmNvbC1sZy04CiAgICAgICAgLmJnLWNvbG9yLTIucC00LmgtMTAwCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLXN0YXJ0CiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzE1LnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICBwLm1iLTMgI1tzdHJvbmcgQ29uc2VqbzpdCiAgICAgICAgICAgICAgcC5tYi0wIFRvZGFzIGxhcyByZXN0cmljY2lvbmVzIGRlYmVuIGZvcm11bGFyc2UgZW4gZWN1YWNpb25lcyBvIGluZWN1YWNpb25lcyBsaW5lYWxlcyBxdWUgcmVwcmVzZW50ZW4gYWRlY3VhZGFtZW50ZSBsb3MgbMOtbWl0ZXMgZGVsIHByb2JsZW1hLiAoTGFzIHZhcmlhYmxlcyBkZWJlbiBzZXIgbm8gbmVnYXRpdmFzLCBkZWJpZG8gYSBxdWUgbm8gc2UgcHVlZGVuIHByb2R1Y2lyIGNhbnRpZGFkZXMgbmVnYXRpdmFzIGRlIHByb2R1Y3Rvcy4pIAogICAgICAgIAoKICAgICN0XzJfMi50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAyLjJdIEVqZW1wbG9zIHByw6FjdGljb3MgZW4gw6FyZWFzIGNvbW8gbG9nw61zdGljYSwgaW52ZW50YXJpb3MgeSBwcm9kdWNjacOzbgoKCiAgICBwLm1iLTQgTGEgI1tzdHJvbmcgUHJvZ3JhbWFjacOzbiBMaW5lYWwgKFBMKV0gZXMgdW5hIGhlcnJhbWllbnRhIGZ1bmRhbWVudGFsIGVuIGxhIHRvbWEgZGUgZGVjaXNpb25lcyBlbXByZXNhcmlhbGVzLCBwZXJtaXRpZW5kbyBvcHRpbWl6YXIgZWwgdXNvIGRlIHJlY3Vyc29zIHkgbWF4aW1pemFyIG8gbWluaW1pemFyIGZ1bmNpb25lcyBvYmpldGl2bywgZW4gZGl2ZXJzb3Mgc2VjdG9yZXMuIEEgY29udGludWFjacOzbiwgc2UgcHJlc2VudGFuIHRyZXMgZWplbXBsb3MgcHLDoWN0aWNvcyBlbiAjW3N0cm9uZyBsb2fDrXN0aWNhLCBpbnZlbnRhcmlvcyB5IHByb2R1Y2Npw7NuXSwgZm9ybXVsYWRvcyBjb24gbW9kZWxvcyBtYXRlbcOhdGljb3MgZGUgZsOhY2lsIGNvbXByZW5zacOzbi4KCgogICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIubWItNQogICAgICAuY29sLWxnLTggICAgICAKICAgICAgICBMaW5lYVRpZW1wb0QuY29sb3ItcHJpbWFyaW8ubGFyZ2UoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKQogICAgICAgICAgZGl2KG51bWVybz0iMSIgdGl0dWxvPSJFamVtcGxvIDEuIE9wdGltaXphY2nDs24gZGUgcnV0YXMgZW4gbG9nw61zdGljYSIpCiAgICAgICAgICAgIHAubWItNCAjW3N0cm9uZyBDb250ZXh0by5dIFVuYSBlbXByZXNhIGRlIHRyYW5zcG9ydGUgYnVzY2EgbWluaW1pemFyIGxvcyBjb3N0b3MgZGUgZW52w61vIGRlIHByb2R1Y3RvcyBkZXNkZSAjW3N0cm9uZyBkb3MgYWxtYWNlbmVzXSBoYXN0YSAjW3N0cm9uZyB0cmVzIHRpZW5kYXNdLgogICAgICAgICAgICAKICAgICAgICAgICAgcC5tYi00ICNbc3Ryb25nIE1vZGVsbyBtYXRlbcOhdGljb10KICAgICAgICAgICAgCiAgICAgICAgICAgIHAubWItMiAjW3N0cm9uZyAxLl0gRGVmaW5pciB2YXJpYWJsZXMgZGUgZGVjaXNpw7NuLgogICAgICAgICAgICB1bC5saXN0YS11bC5tYi00LnBzLTQKICAgICAgICAgICAgICBsaQogICAgICAgICAgICAgICAgfCDiipUgeOKCgSA9IENhbnRpZGFkIGVudmlhZGEgZGVzZGUgZWwgQWxtYWPDqW4gMS4KICAgICAgICAgICAgICBsaQogICAgICAgICAgICAgICAgfCDiipUgeOKCgiA9IENhbnRpZGFkIGVudmlhZGEgZGVzZGUgZWwgQWxtYWPDqW4gMi4KICAgICAgICAgICAgCiAgICAgICAgICAgIHAubWItMiAjW3N0cm9uZyAyLl0gRnVuY2nDs24gb2JqZXRpdm8gKG1pbmltaXphY2nDs24gZGUgY29zdG9zIGRlIHRyYW5zcG9ydGUpLgogICAgICAgICAgICB1bC5saXN0YS11bC5tYi00LnBzLTQKICAgICAgICAgICAgICBsaQogICAgICAgICAgICAgICAgfCDiipUgWiA9IDV44oKBICsgNHjigoIgKGRvbmRlIDUgeSA0IHNvbiBsb3MgY29zdG9zIGRlIHRyYW5zcG9ydGUgcG9yIHVuaWRhZCBkZXNkZSBjYWRhIGFsbWFjw6luKS4KCiAgICAgICAgICAgIHAubWItMiAjW3N0cm9uZyAzLl0gUmVzdHJpY2Npb25lcy4KICAgICAgICAgICAgdWwubGlzdGEtdWwubWItNC5wcy00CiAgICAgICAgICAgICAgbGkKICAgICAgICAgICAgICAgIHwg4oqVIHjigoEgKyB44oKCIOKJpSAyMDAgKERlYmVuIGN1YnJpciBsYSBkZW1hbmRhIGRlIDIwMCB1bmlkYWRlcykuCiAgICAgICAgICAgICAgbGkKICAgICAgICAgICAgICAgIHwg4oqVIHjigoEg4omkIDE1MCAoQ2FwYWNpZGFkIG3DoXhpbWEgZGVsIEFsbWFjw6luIDEpLgogICAgICAgICAgICAgIGxpCiAgICAgICAgICAgICAgICB8IOKKlSB44oKCIOKJpCAxMDAgKENhcGFjaWRhZCBtw6F4aW1hIGRlbCBBbG1hY8OpbiAyKS4KICAgICAgICAgICAgICBsaQogICAgICAgICAgICAgICAgfCDiipUgeOKCgSwgeOKCgiDiiaUgMCAoTm8gcHVlZGVuIHNlciB2YWxvcmVzIG5lZ2F0aXZvcykuCgogICAgICAgICAgICBwLm1iLTIgI1tzdHJvbmcgU29sdWNpw7NuLl0gU2UgcHVlZGUgcmVzb2x2ZXIgZ3LDoWZpY2FtZW50ZSBvIG1lZGlhbnRlIGVsIG3DqXRvZG8gU2ltcGxleCwgcGFyYSBkZXRlcm1pbmFyIGxhIGNvbWJpbmFjacOzbiDDs3B0aW1hIHF1ZSBtaW5pbWl6YSBsb3MgY29zdG9zLgogICAgICAgICAgICAgICAgCgogICAgICAgICAgZGl2KG51bWVybz0iMiIgdGl0dWxvPSJFamVtcGxvIDIuIEdlc3Rpw7NuIGRlIGludmVudGFyaW9zIikKICAgICAgICAgICAgcC5tYi00ICNbc3Ryb25nIENvbnRleHRvLl0gVW5hIGVtcHJlc2EgYnVzY2EgI1tzdHJvbmcgbWluaW1pemFyIGxvcyBjb3N0b3MgZGUgYWxtYWNlbmFtaWVudG9dIGRlIGRvcyBwcm9kdWN0b3MgZW4gc3UgYm9kZWdhLCBhc2VndXJhbmRvIHN1ZmljaWVudGUgc3RvY2sgcGFyYSBsYSBkZW1hbmRhLgogICAgICAgICAgICAKICAgICAgICAgICAgcC5tYi00ICNbc3Ryb25nIE1vZGVsbyBtYXRlbcOhdGljb10KICAgICAgICAgICAgCiAgICAgICAgICAgIHAubWItMiAjW3N0cm9uZyAxLl0gRGVmaW5pciB2YXJpYWJsZXMgZGUgZGVjaXNpw7NuLgogICAgICAgICAgICB1bC5saXN0YS11bC5tYi00LnBzLTQKICAgICAgICAgICAgICBsaQogICAgICAgICAgICAgICAgfCDiipUgeOKCgSA9IENhbnRpZGFkIGRlbCBQcm9kdWN0byBBIGFsbWFjZW5hZG8uCiAgICAgICAgICAgICAgbGkKICAgICAgICAgICAgICAgIHwg4oqVIHjigoIgPSBDYW50aWRhZCBkZWwgUHJvZHVjdG8gQiBhbG1hY2VuYWRvLgogICAgICAgICAgICAKICAgICAgICAgICAgcC5tYi0yICNbc3Ryb25nIDIuXSBGdW5jacOzbiBvYmpldGl2byAobWluaW1pemFjacOzbiBkZSBjb3N0b3MgZGUgYWxtYWNlbmFtaWVudG8pLgogICAgICAgICAgICB1bC5saXN0YS11bC5tYi00LnBzLTQKICAgICAgICAgICAgICBsaQogICAgICAgICAgICAgICAgfCDiipUgWiA9IDJ44oKBICsgM3jigoIgKGRvbmRlIDIgeSAzIHNvbiBsb3MgY29zdG9zIGRlIGFsbWFjZW5hbWllbnRvIHBvciB1bmlkYWQgZGUgY2FkYSBwcm9kdWN0bykuCgogICAgICAgICAgICBwLm1iLTIgI1tzdHJvbmcgMy5dIFJlc3RyaWNjaW9uZXMuCiAgICAgICAgICAgIHVsLmxpc3RhLXVsLm1iLTQucHMtNAogICAgICAgICAgICAgIGxpCiAgICAgICAgICAgICAgICB8IOKKlSB44oKBICsgeOKCgiDiiaQgNTAwIChDYXBhY2lkYWQgbcOheGltYSBkZWwgYWxtYWPDqW4pLgogICAgICAgICAgICAgIGxpCiAgICAgICAgICAgICAgICB8IOKKlSB44oKBIOKJpSAxMDAgKFNlIGRlYmUgYWxtYWNlbmFyIGFsIG1lbm9zIDEwMCB1bmlkYWRlcyBkZWwgUHJvZHVjdG8gQSkuCiAgICAgICAgICAgICAgbGkKICAgICAgICAgICAgICAgIHwg4oqVIHjigoIg4omlIDE1MCAoU2UgZGViZSBhbG1hY2VuYXIgYWwgbWVub3MgMTUwIHVuaWRhZGVzIGRlbCBQcm9kdWN0byBCKS4KICAgICAgICAgICAgICBsaQogICAgICAgICAgICAgICAgfCDiipUgeOKCgSwgeOKCgiDiiaUgMCAoTm8gcHVlZGVuIHNlciB2YWxvcmVzIG5lZ2F0aXZvcykuCgoKICAgICAgICAgIGRpdihudW1lcm89IjMiIHRpdHVsbz0iRWplbXBsbyAzLiBQbGFuaWZpY2FjacOzbiBkZSBwcm9kdWNjacOzbiIpCiAgICAgICAgICAgIHAubWItNCAjW3N0cm9uZyBDb250ZXh0by5dIFVuYSBmw6FicmljYSBwcm9kdWNlICNbc3Ryb25nIG1lc2FzIHkgc2lsbGFzXSB5IGJ1c2NhICNbc3Ryb25nIG1heGltaXphciBzdXMgZ2FuYW5jaWFzXSB1dGlsaXphbmRvIHJlY3Vyc29zIGxpbWl0YWRvcyBkZSBtYWRlcmEgeSBob3JhcyBkZSB0cmFiYWpvLgogICAgICAgICAgICAKICAgICAgICAgICAgcC5tYi00ICNbc3Ryb25nIE1vZGVsbyBtYXRlbcOhdGljb10KICAgICAgICAgICAgCiAgICAgICAgICAgIHAubWItMiAjW3N0cm9uZyAxLl0gRGVmaW5pciB2YXJpYWJsZXMgZGUgZGVjaXNpw7NuLgogICAgICAgICAgICB1bC5saXN0YS11bC5tYi00LnBzLTQKICAgICAgICAgICAgICBsaQogICAgICAgICAgICAgICAgfCDiipUgeOKCgSA9IENhbnRpZGFkIGRlIG1lc2FzIHByb2R1Y2lkYXMuCiAgICAgICAgICAgICAgbGkKICAgICAgICAgICAgICAgIHwg4oqVIHjigoIgPSBDYW50aWRhZCBkZSBzaWxsYXMgcHJvZHVjaWRhcy4KICAgICAgICAgICAgCiAgICAgICAgICAgIHAubWItMiAjW3N0cm9uZyAyLl0gRnVuY2nDs24gb2JqZXRpdm8gKG1heGltaXphY2nDs24gZGUgZ2FuYW5jaWFzKS4KICAgICAgICAgICAgdWwubGlzdGEtdWwubWItNC5wcy00CiAgICAgICAgICAgICAgbGkKICAgICAgICAgICAgICAgIHwg4oqVIFogPSA1MHjigoEgKyAzMHjigoIgKGRvbmRlIDUwIHkgMzAgc29uIGxhcyBnYW5hbmNpYXMgcG9yIGNhZGEgbWVzYSB5IHNpbGxhIHByb2R1Y2lkYSwgcmVzcGVjdGl2YW1lbnRlKS4KCiAgICAgICAgICAgIHAubWItMiAjW3N0cm9uZyAzLl0gUmVzdHJpY2Npb25lcy4KICAgICAgICAgICAgdWwubGlzdGEtdWwubWItNC5wcy00CiAgICAgICAgICAgICAgbGkKICAgICAgICAgICAgICAgIHwg4oqVIDh44oKBICsgNHjigoIg4omkIDUwMCAoQ2FkYSBtZXNhIHVzYSA4IHVuaWRhZGVzIGRlIG1hZGVyYSB5IGNhZGEgc2lsbGEgNCkuCiAgICAgICAgICAgICAgbGkKICAgICAgICAgICAgICAgIHwg4oqVIDJ44oKBICsgeOKCgiDiiaQgMTIwIChDYWRhIG1lc2EgcmVxdWllcmUgMiBob3JhcyBkZSB0cmFiYWpvIHkgY2FkYSBzaWxsYSAxKS4KICAgICAgICAgICAgICBsaQogICAgICAgICAgICAgICAgfCDiipUgeOKCgiDiiaQgMTAwIChNw6F4aW1vIGRlIDEwMCBzaWxsYXMgZGVtYW5kYWRhcykuCiAgICAgICAgICAgICAgbGkKICAgICAgICAgICAgICAgIHwg4oqVIHjigoEsIHjigoIg4omlIDAgKE5vIHB1ZWRlbiBzZXIgdmFsb3JlcyBuZWdhdGl2b3MpLgoKICAgICAgICAgICAgcC5tYi0yICNbc3Ryb25nIFNvbHVjacOzbi5dIFNlIGVuY3VlbnRyYSBsYSBjb21iaW5hY2nDs24gw7NwdGltYSBkZSBtZXNhcyB5IHNpbGxhcyBxdWUgbWF4aW1pemEgbGFzIGdhbmFuY2lhcyBzaW4gZXhjZWRlciBsb3MgcmVjdXJzb3MgZGlzcG9uaWJsZXMuCgogICAgICAuY29sLWxnLTQKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzE2LnBuZyIsIGFsdD0iIiwgZGF0YS1hb3M9Inpvb20taW4iKS5tYi00Lm1iLWxnLTAKICAgIAoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTIKICAgICAgLnB4LTQucC1tZC01CiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgLmNvbC1sZy00CiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTIvMTgucG5nJywgYWx0PScnKQogICAgCiAgICAgICAgICAuY29sLWxnLTgKICAgICAgICAgICAgaDIubWItNChkYXRhLWFvcz0iZmxpcC11cCIpIEVqZW1wbG9zIGVuIG1vZGVsb3MgZGUgbWF4aW1pemFjacOzbiB5IG1pbmltaXphY2nDs24KICAgICAgICAgICAgcC5tYi00KGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikgTGEgUHJvZ3JhbWFjacOzbiBMaW5lYWwgZXMgdW5hIGhlcnJhbWllbnRhIGVzZW5jaWFsIHBhcmEgbGEgdG9tYSBkZSBkZWNpc2lvbmVzIGVzdHJhdMOpZ2ljYXMgZW4gZGlzdGludG9zIMOhbWJpdG9zIGVtcHJlc2FyaWFsZXMsIHBlcm1pdGllbmRvIG9wdGltaXphciBlbCB1c28gZGUgcmVjdXJzb3MgeSBtZWpvcmFyIGxhIGVmaWNpZW5jaWEgb3BlcmF0aXZhLiBFbiBlbCBQREYgRWplbXBsb3MgZW4gbW9kZWxvcyBkZSBtYXhpbWl6YWNpw7NuIHkgbWluaW1pemFjacOzIG4sIHNlIHByZXNlbnRhbiBjYXNvcyBkZXRhbGxhZG9zIGVuIGxvcyBxdWUgc2UgYXBsaWNhbiB0w6ljbmljYXMgZGUgb3B0aW1pemFjacOzbiBwYXJhIG1heGltaXphciBiZW5lZmljaW9zIG8gbWluaW1pemFyIGNvc3RvcyBlbiBkaXZlcnNvcyBjb250ZXh0b3MsIGNvbW8gbGEgcHJvZHVjY2nDs24sIGxhIGxvZ8Otc3RpY2EgeSBsYSBnZXN0acOzbiBkZSBwcm95ZWN0b3MuIENhZGEgZWplbXBsbyBpbmNsdXllIGxhIGZvcm11bGFjacOzbiBkZWwgcHJvYmxlbWEsIGxhIGRlZmluaWNpw7NuIGRlIHZhcmlhYmxlcyBkZSBkZWNpc2nDs24sIGxhIGNvbnN0cnVjY2nDs24gZGUgbGEgZnVuY2nDs24gb2JqZXRpdm8geSBsYXMgcmVzdHJpY2Npb25lcywgYXPDrSBjb21vIHVuYSByZXNvbHVjacOzbiBwYXNvIGEgcGFzbyBwYXJhIGNvbXByZW5kZXIgc3UgYXBsaWNhY2nDs24gcHLDoWN0aWNhLgogICAgCiAgICAgICAgICAgIGEuYW5leG8ubWItNC5iZy13aGl0ZS53LWZpdCg6aHJlZj0ib2J0ZW5lckxpbmsoJy9kb3dubG9hZHMvQW5leG9fMS5wZGYnKSIgdGFyZ2V0PSJfYmxhbmsiKShkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgICAgICAgICAgLmFuZXhvX19pY29ubyg6c3R5bGU9InsnYmFja2dyb3VuZC1jb2xvcic6ICcjRkNERkRCJ30iKQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvdGVtcGxhdGUvaWNvbm8tcGRmLnN2ZyIpCiAgICAgICAgICAgICAgLmFuZXhvX190ZXh0bwogICAgICAgICAgICAgICAgcCA8c3Ryb25nPkFuZXhvLiA8L3N0cm9uZz4gRWplbXBsb3MgZW4gbW9kZWxvcyBkZSBtYXhpbWl6YWNpw7NuIHkgbWluaW1pemFjacOzbgogICAgCiAgICAgCgogICAgLmJnLWZ1bGwtd2lkdGguYm9yZGVyLXRvcC5jb2xvci1wcmltYXJpbwogICAgICAucC00LnAtbWQtNQogICAgICAgIGgyKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBNQVRFUklBTCBDT01QTEVNRU5UQVJJTwogICAgICAgIC5yb3cubWF0ZXJpYWwtY29tcGxlbWVudGFyaW8KICAgICAgICAgIC5jb2wtMTIuY29sLW1kLTYuY29sLWxnLTcKICAgICAgICAgICAgcCBMb3MgaW52aXRhbW9zIGEgZXhwbG9yYXIgZWwgbWF0ZXJpYWwgY29tcGxlbWVudGFyaW8gZGUgZXN0ZSBjdXJzbywgZW4gZXN0YSBzZWNjacOzbiBlbmNvbnRyYXLDoSByZWN1cnNvcyBxdWUgbGUgcGVybWl0aXLDoW4gcHJvZnVuZGl6YXIgIHkgZW5yaXF1ZWNlciBzdSBhcHJlbmRpemFqZSBlbiBsb3MgdGVtYXMgdHJhdGFkb3MgZW4gZXN0YSB1bmlkYWQuCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL2VsaWJyby5uZXQvZXMvbGMvdGVjbm9sb2dpY2FkZWxvcmllbnRlL3RpdHVsb3MvNjg0MzIiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBGbG9yZXMtQmF6w6FuLCBGLiAoMjAxMikuIE9wdGltaXphY2nDs24gbGluZWFsOiB1bmEgbWlyYWRhIGludHJvZHVjdG9yaWE6ICggZWQuKS4gRWRpdG9yaWFsIGVib29rcyBQYXRhZ29uaWEgLSBKLkMuIFPDoWV6IEVkaXRvci4KCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ljb25vLXl0LnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PVV0WG5CdWswcmpBIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgR09BTCBQUk9KRUNULiAoMjAxOCwgMTYgZGUgZW5lcm8pLiBQcm9ncmFtYWNpw7NuIExpbmVhbCBQcm9ibGVtYXMgQ2zDoXNpY29zIDA2LiBbVmlkZW9dLiBZb3VUdWJlLgoKICAgICAgICAgIC5jb2wtMTIuY29sLW1kLTYuY29sLWxnLTMub2Zmc2V0LWxnLTEKICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbWF0ZXJpYWwtY29tcGxlbWVudGFyaW8uc3ZnJywgYWx0PScnKQoK"},null]}